import PushNotification from 'react-native-push-notification';
import CommonFetch from './CommonFetch';
import { getUserId } from '../utils/Common';
import API from '../api/index';
import moment from 'moment';

let subText = '';
let bigText = '';
let color = '';
let time = '00:00:00';

export default class NotifService {
	constructor(onRegister, onNotification) {
		this.configure(onRegister, onNotification);

		this.lastId = 0;
	}

	componentDidMount() {
		getUserId().then((_userId) => {
			this.userId = _userId;
		});
	}

	configure(onRegister, onNotification, gcm = '') {
		PushNotification.configure({
			// (optional) Called when Token is generated (iOS and Android)
			onRegister: onRegister, //this._onRegister.bind(this),

			// (required) Called when a remote or local notification is opened or received
			onNotification: onNotification, //this._onNotification,

			// ANDROID ONLY: GCM Sender ID (optional - not required for local notifications, but is need to receive remote push notifications)
			senderID: gcm,

			// IOS ONLY (optional): default: all - Permissions to register.
			permissions: {
				alert: true,
				badge: true,
				sound: true
			},

			// Should the initial notification be popped automatically
			// default: true
			popInitialNotification: true,

			/**
        * (optional) default: true
        * - Specified if permissions (ios) and token (android and ios) will requested or not,
        * - if not, you must call PushNotificationsHandler.requestPermissions() later
        */
			requestPermissions: true
		});
	}

	convertAlarmColor = (type) => {
		color = '#D0021B';
		if (type == '人脸报警') {
			color = '#D0021B';
		} else if (type == '车辆报警') {
			color = '#FE7C03';
		} else if (type == '信息报警') {
			color = '#F8E71C';
		}
		return color;
	};

	doFetch(uri, callback) {
		fetch(uri, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/x-www-form-urlencoded'
			},
			body: ''
		})
			.then((response) => response.json())
			.then(callback)
			.catch((error) => {
				console.error(error);
			});
	}

	getAlarmList() {
    let date = moment().locale('zh-cn').format('YYYY-MM-DD');
    if(time == '00:00:00') {
      this.doFetch(API.getNotifAlarmData + `?pwd=2ysh3z72w&date=${date}&time=${time}`, (responseData) => {
        if (responseData.Exists) {
          time = responseData.AlarmTime.slice(11);
        }
      });
    }else{
      this.doFetch(API.getNotifAlarmData + `?pwd=2ysh3z72w&date=${date}&time=${time}`, (responseData) => {
        if (responseData.Exists) {
          time = responseData.AlarmTime.slice(11);
          subText = responseData.AlarmType;
          bigText = `${responseData.AlarmType}: ${responseData.AlarmTime}`;
          color = this.convertAlarmColor(responseData.AlarmType);
          this.localNotif();
        }
      });
    }
	}

	localNotif() {
		this.lastId++;
		PushNotification.localNotification({
			/* Android Only Properties */
			id: '' + this.lastId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
			ticker: 'My Notification Ticker', // (optional)
			autoCancel: false, // (optional) default: true
			largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
			smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
			bigText: bigText, // (optional) default: "message" prop
			subText: subText, // (optional) default: none
			color: color, // (optional) default: system default
			vibrate: true, // (optional) default: true
			vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
			tag: 'some_tag', // (optional) add tag to message
			group: 'group', // (optional) add group to message
			ongoing: false, // (optional) set whether this is an "ongoing" notification

			/* iOS and Android properties */
			title: subText, // (optional)
			message: bigText, // (required)
			playSound: true, // (optional) default: true
			soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
			number: '10' // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
		});
	}
}
